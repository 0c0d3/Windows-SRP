# Ensure PowerShell is running as Administrator
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Host "Please run this script as an Administrator."
    exit
}

# Enable Real-time Protection
Set-MpPreference -DisableRealtimeMonitoring $false

# Enable Cloud-based Protection
Set-MpPreference -UseCloudBlocklist $true
Set-MpPreference -EnableCloudProtection $true

# Enable Automatic Sample Submission
Set-MpPreference -SubmitSamplesConsent 2  # 2 = Send all samples automatically

# Enable Windows Defender Antivirus
Set-Service -Name "WinDefend" -StartupType Automatic
Start-Service -Name "WinDefend"

# Enable Potentially Unwanted Application (PUA) Protection
Set-MpPreference -PUAProtection Enabled

# Enable Network Protection
Set-MpPreference -EnableNetworkProtection Enabled

# Enable Controlled Folder Access
Set-MpPreference -ControlledFolderAccess Enabled

# Enable Exploit Protection
Set-MpPreference -EnableExploitProtection Enabled

# Block Script Execution
Set-MpPreference -EnableScriptBlockLogging $false  # Disable logging of scripts
Set-MpPreference -DisableScriptExecution $true      # Block script execution

# Enable Beta updates
Set-MpPreference -EnableEnhancedNotifications $true  # Enable enhanced notifications for beta updates
Set-MpPreference -EnableBetaUpdates $true             # Enable beta updates for Windows Defender

# Function to compute and verify hashes, blocking immediately if hash doesn't match
function Verify-ApplicationHash {
    param (
        [string]$filePath,
        [string]$expectedHash
    )

    if (Test-Path $filePath) {
        $computedHash = (Get-FileHash -Path $filePath -Algorithm SHA256).Hash
        if ($computedHash -eq $expectedHash) {
            Write-Host "$filePath: Hash matches. Application is allowed."
            return $true
        } else {
            Write-Host "$filePath: Hash does not match! Application is blocked."

            # Block the application using Windows Defender
            Add-MpPreference -BlockedApps $filePath
            return $false
        }
    } else {
        Write-Host "$filePath: File does not exist!"
        return $false
    }
}

# Example applications and their expected hashes
$applications = @(
    @{ Path = "C:\Windows\System32\notepad.exe"; Hash = "B21A600EF0D93C22C4B5A688A47C917BFFB3A493" },
    @{ Path = "C:\Program Files\Mozilla Firefox\firefox.exe"; Hash = "D7F1BCE7F235DB7F354F00BF76D9A3C2D8C0D2E8" }
)

# Verify the hash of each application
foreach ($app in $applications) {
    Verify-ApplicationHash -filePath $app.Path -expectedHash $app.Hash
}

# Enable Attack Surface Reduction (ASR) rules (optional)
# Example: Block credential stealing
Set-MpPreference -AttackSurfaceReductionRules_Ids "D3D9BCE4-2B16-4C7F-BE61-91C3786DAA38"  # ID for blocking credential stealing

# Enable Audit mode for Exploit Guard (optional)
Set-MpPreference -EnableControlledFolderAccessAudit $true

# Enable Endpoint Detection and Response (EDR) capabilities (requires Microsoft 365 E5 license)
Set-MpPreference -EnableEDRReporting $true

# Display current settings
Get-MpPreference | Format-List
